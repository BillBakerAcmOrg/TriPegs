// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using trianglePegs;
using System.Collections;
namespace TestGamePlay
{
    /// <summary>
    ///This is a test class for trianglePegs.game and is intended
    ///to contain all trianglePegs.game Unit Tests
    ///</summary>
    [TestClass()]
    public class gameTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AvailableMoves
        ///</summary>
        [TestMethod()]
        public void AvailableMovesTest()
        {
            game target = new game();

            ArrayList val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.AvailableMoves, "trianglePegs.game.AvailableMoves was not set correctly.");
        }

        /// <summary>
        ///A test for game ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            game target = new game();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for GameOver
        ///</summary>
        [TestMethod()]
        public void GameOverTest()
        {
            game target = new game();

            bool val = false; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.GameOver, "trianglePegs.game.GameOver was not set correctly.");
        }

        /// <summary>
        ///A test for GetLastMove
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(Exception),"The are no moves to undo.")]
        public void GetLastMoveTest()
        {
            game target = new game();

            MoveTuple val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.GetLastMove, "trianglePegs.game.GetLastMove was not set correctly.");
        }

        /// <summary>
        ///A test for IsLegalMove (int, int)
        ///</summary>
        [DeploymentItem("trianglePegs.exe")]
        [TestMethod()]
        public void IsLegalMoveTest()
        {
            game target = new game();

            TestGamePlay.trianglePegs_gameAccessor accessor = new TestGamePlay.trianglePegs_gameAccessor(target);

            int oldPosition = 0; // TODO: Initialize to an appropriate value

            int newPosition = 0; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = accessor.IsLegalMove(oldPosition, newPosition);

            Assert.AreEqual(expected, actual, "trianglePegs.game.IsLegalMove did not return the expected value.");
        }

        /// <summary>
        ///A test for IsSpaceOpen (int)
        ///</summary>
        [TestMethod()]
        public void IsSpaceOpenTest()
        {
            game target = new game();

            int space = 0; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = target.IsSpaceOpen(space);

            Assert.AreEqual(expected, actual, "trianglePegs.game.IsSpaceOpen did not return the expected value.");
        }

        /// <summary>
        ///A test for IsValidMove (int, int)
        ///</summary>
        [DeploymentItem("trianglePegs.exe")]
        [TestMethod()]
        public void IsValidMoveTest()
        {
            game target = new game();

            TestGamePlay.trianglePegs_gameAccessor accessor = new TestGamePlay.trianglePegs_gameAccessor(target);

            int oldPosition = 0; // TODO: Initialize to an appropriate value

            int newPosition = 0; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = accessor.IsValidMove(oldPosition, newPosition);

            Assert.AreEqual(expected, actual, "trianglePegs.game.IsValidMove did not return the expected value.");
        }

        /// <summary>
        ///A test for JumpedSpace (int, int)
        ///</summary>
        [DeploymentItem("trianglePegs.exe")]
        [TestMethod()]
        public void JumpedSpaceTest()
        {
            game target = new game();

            TestGamePlay.trianglePegs_gameAccessor accessor = new TestGamePlay.trianglePegs_gameAccessor(target);

            int oldPosition = 0; // TODO: Initialize to an appropriate value

            int newPosition = 0; // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = accessor.JumpedSpace(oldPosition, newPosition);

            Assert.AreEqual(expected, actual, "trianglePegs.game.JumpedSpace did not return the expected value.");
        }

        /// <summary>
        ///A test for LoadFromFile (string)
        ///</summary>
        [TestMethod()]
        public void LoadFromFileTest()
        {
            game target = new game();

            string fileName = null; // TODO: Initialize to an appropriate value

            target.LoadFromFile(fileName);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for LoadGameFromFile (string)
        ///</summary>
        [TestMethod()]
        public void LoadGameFromFileTest()
        {
            string fileName = null; // TODO: Initialize to an appropriate value

            game expected = null;
            game actual;

            actual = trianglePegs.game.LoadGameFromFile(fileName);

            Assert.AreEqual(expected, actual, "trianglePegs.game.LoadGameFromFile did not return the expected value.");
        }

        /// <summary>
        ///A test for Move (int, int)
        ///</summary>
        [TestMethod()]
        public void MoveTest()
        {
            game target = new game();

            int oldPosition = 0; // TODO: Initialize to an appropriate value

            int newPosition = 0; // TODO: Initialize to an appropriate value

            target.Move(oldPosition, newPosition);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for PegsLeft
        ///</summary>
        [TestMethod()]
        public void PegsLeftTest()
        {
            game target = new game();

            int val = 0; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.PegsLeft, "trianglePegs.game.PegsLeft was not set correctly.");
        }

        /// <summary>
        ///A test for SaveToFile (string)
        ///</summary>
        [TestMethod()]
        public void SaveToFileTest()
        {
            game target = new game();

            string fileName = null; // TODO: Initialize to an appropriate value

            target.SaveToFile(fileName);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for SetupBoard (int)
        ///</summary>
        [TestMethod()]
        public void SetupBoardTest()
        {
            game target = new game();

            int emptySpace = 0; // TODO: Initialize to an appropriate value

            target.SetupBoard(emptySpace);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for SuggestedMove (ref int, ref int)
        ///</summary>
        [TestMethod()]
        public void SuggestedMoveTest()
        {
            game target = new game();

            int oldPosition = 0; // TODO: Initialize to an appropriate value
            int oldPosition_expected = 0; // TODO: Initialize to an appropriate value

            int newPosition = 0; // TODO: Initialize to an appropriate value
            int newPosition_expected = 0; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = target.SuggestedMove(ref oldPosition, ref newPosition);

            Assert.AreEqual(oldPosition_expected, oldPosition, "oldPosition_SuggestedMove_expected was not set correctly.");
            Assert.AreEqual(newPosition_expected, newPosition, "newPosition_SuggestedMove_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "trianglePegs.game.SuggestedMove did not return the expected value.");
        }

        /// <summary>
        ///A test for ToString ()
        ///</summary>
        [TestMethod()]
        public void ToStringTest()
        {
            game target = new game();

            string expected = null;
            string actual;

            actual = target.ToString();

            Assert.AreEqual(expected, actual, "trianglePegs.game.ToString did not return the expected value.");
        }

        /// <summary>
        ///A test for Undo ()
        ///</summary>
        [TestMethod()]
        public void UndoTest()
        {
            game target = new game();

            target.Undo();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }
    /// <summary>
    ///This is a test class for trianglePegs.game.MoveTuple and is intended
    ///to contain all trianglePegs.game.MoveTuple Unit Tests
    ///</summary>
    [TestClass()]
    public class MoveTupleTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for destination
        ///</summary>
        [TestMethod()]
        public void destinationTest()
        {
            MoveTuple target = new MoveTuple();

            int val = 0; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.destination, "trianglePegs.game.MoveTuple.destination was not set correctly.");
        }

        /// <summary>
        ///A test for jumped
        ///</summary>
        [TestMethod()]
        public void jumpedTest()
        {
            MoveTuple target = new MoveTuple();

            int val = 0; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.jumped, "trianglePegs.game.MoveTuple.jumped was not set correctly.");
        }

        /// <summary>
        ///A test for MoveTuple ()
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            MoveTuple target = new MoveTuple();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for MoveTuple (int, int, int)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest1()
        {
            int orig = 0; // TODO: Initialize to an appropriate value

            int jmp = 0; // TODO: Initialize to an appropriate value

            int dest = 0; // TODO: Initialize to an appropriate value

            MoveTuple target = new MoveTuple(orig, jmp, dest);

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for original
        ///</summary>
        [TestMethod()]
        public void originalTest()
        {
            MoveTuple target = new MoveTuple();

            int val = 0; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.original, "trianglePegs.game.MoveTuple.original was not set correctly.");
        }

        /// <summary>
        ///A test for ToString ()
        ///</summary>
        [TestMethod()]
        public void ToStringTest()
        {
            MoveTuple target = new MoveTuple();

            string expected = null;
            string actual;

            actual = target.ToString();

            Assert.AreEqual(expected, actual, "trianglePegs.game.MoveTuple.ToString did not return the expected value.");
        }

    }


}
